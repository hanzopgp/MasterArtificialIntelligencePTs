param cartpole:

for seed in range(5):
  print("---------------> SEED:", seed)
  params={
    "save_best": False,
    "logger":{
      "classname": "bbrl.utils.logger.TFLogger",
      "log_dir": "./tmp/dqn-buffer-" + str(time.time()),
      "cache_size": 10000,
      "every_n_seconds": 10,
      "verbose": False,    
      },

    "algorithm":{
      "seed": seed,
      "max_grad_norm": 0.5,
      "epsilon": 0.02,
      "epsilon_decay": 1e-6,
      "n_envs": 16,
      "n_steps": 32,
      "eval_interval": 2000,
      "learning_starts": 2000,
      "nb_evals": 10,
      "buffer_size": 1e6,
      "batch_size": 256,
      "target_critic_update": 5000,
      "max_epochs": 3500,
      "discount_factor": 0.99,
      "architecture":{"hidden_size": [256, 256]},
    },
    "gym_env":{
      "classname": "__main__.make_env",
      # "env_name": "LunarLander-v2",
      "env_name": "CartPole-v1",
    },
    "optimizer":
    {
      "classname": "torch.optim.Adam",
      "lr": 2e-3,
    }
  }

  config=OmegaConf.create(params)
  torch.manual_seed(config.algorithm.seed)

  run_dqn(config, compute_dqn_loss)



SLOWER LR : more stable learning
DQN > DDQN but probably because cartpole is really easy env and DDQN would be better with more steps





param lunarlander:

params={
    "save_best": False,
    "logger":{
      "classname": "bbrl.utils.logger.TFLogger",
      "log_dir": "./tmp/dqn-buffer-" + str(time.time()),
      "cache_size": 10000,
      "every_n_seconds": 10,
      "verbose": False,    
      },

    "algorithm":{
      "seed": seed,
      "max_grad_norm": 0.5,
      "epsilon": 0.12,
      "min_eps": 0.1,
      # "epsilon_decay": 5e-6,
      "epsilon_decay": 5e-8,
      "n_envs": 16,
      "n_steps": 32,
      "eval_interval": 2000,
      "learning_starts": 0,
      "nb_evals": 10,
      "buffer_size": 50000,
      "batch_size": 128,
      "target_critic_update": 250,
      "max_epochs": 3500,
      "discount_factor": 0.99,
      "architecture":{"hidden_size": [256, 256]},
    },
    "gym_env":{
      "classname": "__main__.make_env",
      "env_name": "LunarLander-v2",
      # "env_name": "CartPole-v1",
    },
    "optimizer":
    {
      "classname": "torch.optim.Adam",
      "lr": 8e-4,
    }
  }






  param pendulum :

  ddpg :

  params={
  "save_best": True,
  "plot_agents": True,
  "logger":{
    "classname": "bbrl.utils.logger.TFLogger",
    "log_dir": "./tmp/" + str(time.time()),
    "cache_size": 10000,
    "every_n_seconds": 10,
    "verbose": False,    
    },

  "algorithm":{
    "seed": 1,
    "max_grad_norm": 0.5,
    "epsilon": 0.02,
    "n_envs": 1,
    "n_steps": 100,
    "eval_interval": 2000,
    "nb_evals": 10,
    "gae": 0.8,
    "max_epochs": 15000,
    "discount_factor": 0.98,
    "buffer_size": 2e5,
    "batch_size": 64,
    "tau_target": 0.05,
    "learning_starts": 10000,
    "action_noise": 0.1,
    "architecture":{
        "actor_hidden_size": [400, 300],
        "critic_hidden_size": [400, 300],
        },
  },
  "gym_env":{
    "classname": "__main__.make_gym_env",
    "env_name": "Pendulum-v1",
  },
  "actor_optimizer":{
    "classname": "torch.optim.Adam",
    "lr": 1e-3,
  },
  "critic_optimizer":{
    "classname": "torch.optim.Adam",
    "lr": 1e-3,
  }
}



td3 :

params={
  "save_best": True,
  "plot_agents": True,
  "logger":{
    "classname": "bbrl.utils.logger.TFLogger",
    "log_dir": "./tmp/" + str(time.time()),
    "cache_size": 10000,
    "every_n_seconds": 10,
    "verbose": False,    
    },

  "algorithm":{
    "seed": 1,
    "max_grad_norm": 0.5,
    "epsilon": 0.02,
    "n_envs": 1,
    "n_steps": 100,
    "eval_interval": 2000,
    "nb_evals": 10,
    "gae": 0.8,
    "max_epochs": 15000,
    "discount_factor": 0.98,
    "buffer_size": 2e5,
    "batch_size": 64,
    "tau_target": 0.05,
    "learning_starts": 10000,
    "action_noise": 0.1,
    "architecture":{
        "actor_hidden_size": [400, 300],
        "critic_hidden_size": [400, 300],
        },
  },
  "gym_env":{
    "classname": "__main__.make_gym_env",
    "env_name": "Pendulum-v1",
  },
  "actor_optimizer":{
    "classname": "torch.optim.Adam",
    "lr": 1e-3,
  },
  "critic_optimizer":{
    "classname": "torch.optim.Adam",
    "lr": 1e-3,
  }
}